# handlers/cli_handler.py
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å CLI.
"""
import time
import re

class CLIHandler:
    def __init__(self, parent):
        self.parent = parent
        self.logger = parent.logger
        self.connection = parent.connection
        self.patterns = parent.patterns
        self.device_cfg = parent.device_cfg
        self.timeouts = parent.timeouts
        self.stats_manager = parent.stats_manager
        self.credentials = parent.credentials
        self.reset_commands = parent.reset_commands
        self.firmware_info = parent.firmware_info

    def init_cli_handler_config(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ CLI —Ö–µ–Ω–¥–ª–µ—Ä–∞."""
        # –ü–æ–∫–∞ –ø—É—Å—Ç–æ, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –¥–ª—è CLI –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        pass

    def attempt_cli_entry(self):
        self.logger.step("üñ•Ô∏è –ë–ª–æ–∫ 5: –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ CLI")
        
        start_time = time.monotonic()
        timeout = self.timeouts['reboot_wait']
        
        while time.monotonic() - start_time < timeout:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Enter –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞
            self.connection.send_raw(b'\r')
            time.sleep(0.5)
            
            output = self.connection.read_available()
            if output:
                self.logger.debug(f"üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—Ö–æ–¥–∞ –≤ CLI: {output[:100]}...")
                
                if self.patterns['PRIVILEGED_PROMPT'] in output:
                    self.logger.success("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ CLI ('#')!")
                    return "SUCCESS_PRIVILEGED"
                elif self.patterns['USER_PROMPT'] in output:
                    self.logger.info("‚ÑπÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç '>'. –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º...")
                    # –ü–æ–ø—Ä–æ–±—É–µ–º enable
                    self.connection.send_raw(b'enable\r')
                    time.sleep(1)
                    enable_output = self.connection.read_available()
                    if self.patterns['PRIVILEGED_PROMPT'] in enable_output:
                        self.logger.success("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ CLI ('#') –ø–æ—Å–ª–µ 'enable'!")
                        return "SUCCESS_PRIVILEGED"
                    elif self.patterns['PASSWORD_PROMPT'] in enable_output:
                        # –ù—É–∂–µ–Ω –ø–∞—Ä–æ–ª—å –¥–ª—è enable, –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –ª–æ–≥–∏–Ω
                        pass
                    else:
                        self.logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º.")
                        
                if self.patterns['LOGIN_PROMPT'] in output or self.patterns['PASSWORD_PROMPT'] in output:
                    self.logger.info("‚ÑπÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –ª–æ–≥–∏–Ω–∞/–ø–∞—Ä–æ–ª—è –≤ CLI.")
                    login_result = self._handle_login(output)
                    if login_result == "SUCCESS_PRIVILEGED":
                        return login_result
                    elif login_result == "SUCCESS_USER":
                        # –ù—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å enable
                        self.connection.send_raw(b'enable\r')
                        time.sleep(1)
                        enable_prompt = self.connection.read_until_pattern(
                            [self.patterns['PASSWORD_PROMPT'], self.patterns['PRIVILEGED_PROMPT']],
                            timeout=self.timeouts['prompt_wait']
                        )
                        if self.patterns['PRIVILEGED_PROMPT'] in enable_prompt:
                            self.logger.success("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º!")
                            return "SUCCESS_PRIVILEGED"
                        elif self.patterns['PASSWORD_PROMPT'] in enable_prompt:
                            # TODO: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è enable, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                            self.logger.warning("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –¥–ª—è 'enable', –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏.")
                            return "FAILED" # –ò–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –ø—Ä–æ–º–ø—Ç–æ–º?
                        else:
                            self.logger.warning("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ 'enable'.")
                            return "FAILED"
                    else: # "FAILED"
                        return login_result
                        
                if "Please set a new password" in output:
                    self.logger.info("‚ÑπÔ∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è.")
                    if self._handle_initial_password():
                        # –ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä–æ–ª—è —Å–Ω–æ–≤–∞ –ø—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏
                        return self.attempt_cli_entry() # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤, –Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∏—Ç–µ—Ä–∞—Ü–∏–π –≤ run()
                        
            time.sleep(0.5)
            
        self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ CLI!")
        return "FAILED"

    def _handle_login(self, initial_output=""):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–æ–≥–∏–Ω –≤ CLI."""
        credentials_list = self.credentials.get("cli", [])
        sorted_credentials = self.stats_manager.sort_by_stats(credentials_list, "credentials")
        
        # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –≤—ã–≤–æ–¥ —Å –∑–∞–ø—Ä–æ—Å–æ–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        output_buffer = initial_output
        
        for cred in sorted_credentials:
            login = cred['login']
            password = cred['password']
            cred_id = cred['id']
            
            self.logger.debug(f"–ü—Ä–æ–±—É–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ CLI: {cred_id}")
            
            # –ï—Å–ª–∏ –ª–æ–≥–∏–Ω —Ç—Ä–µ–±—É–µ—Ç—Å—è
            if self.patterns['LOGIN_PROMPT'] in output_buffer or "UserName:" in output_buffer:
                self.connection.send_command_and_wait(login, expected_patterns=[self.patterns['PASSWORD_PROMPT']], timeout=self.timeouts['login_attempt'])
                output_buffer = self.connection.get_last_output()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
            self.connection.send_command_and_wait(password, expected_patterns=[self.patterns['USER_PROMPT'], self.patterns['PRIVILEGED_PROMPT'], self.patterns['LOGIN_FAILED_INDICATOR']], timeout=self.timeouts['login_attempt'])
            final_output = self.connection.get_last_output()
            
            if self.patterns['PRIVILEGED_PROMPT'] in final_output and not any(err in final_output for err in self.patterns['LOGIN_FAILED_INDICATOR']):
                self.logger.success(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ CLI —Å –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è–º–∏ '#' –∏—Å–ø–æ–ª—å–∑—É—è {cred_id}!")
                self.stats_manager.update_stats("credentials", cred_id, success=True)
                return "SUCCESS_PRIVILEGED"
            elif self.patterns['USER_PROMPT'] in final_output and not any(err in final_output for err in self.patterns['LOGIN_FAILED_INDICATOR']):
                self.logger.success(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ CLI —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –ø—Ä–∞–≤–∞–º–∏ '>' –∏—Å–ø–æ–ª—å–∑—É—è {cred_id}!")
                self.stats_manager.update_stats("credentials", cred_id, success=True)
                return "SUCCESS_USER"
            else:
                self.logger.debug(f"–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å {cred_id} –Ω–µ —É–¥–∞–ª–∞—Å—å.")
                self.stats_manager.update_stats("credentials", cred_id, success=False)
                # –°–±—Ä–æ—Å –±—É—Ñ–µ—Ä–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
                output_buffer = ""
                
        self.logger.error("‚ùå –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è CLI –Ω–µ –ø–æ–¥–æ—à–ª–∏.")
        return "FAILED"
        
    def _handle_initial_password(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ."""
        try:
            # –í–≤–æ–¥–∏–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
            self.connection.send_raw(b'admin\r') # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å
            time.sleep(1)
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–∞—Ä–æ–ª—å
            self.connection.send_raw(b'admin\r')
            time.sleep(1)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            self.connection.send_raw(b'save\r')
            time.sleep(2)
            # –ù–µ—Å–∫–æ–ª—å–∫–æ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –¥–∏–∞–ª–æ–≥–∞
            for _ in range(3):
                self.connection.send_raw(b'\r')
                time.sleep(0.5)
            
            self.logger.success("‚úÖ –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è: {e}")
            return False

    def execute_cli_reset(self):
        self.logger.step("üóëÔ∏è –ë–ª–æ–∫ 5: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ CLI")
        self.parent.report_data["reset_was_performed"] = True
        
        commands = self.reset_commands.get(self.device_cfg.get("cli_commands", "cli"), [])
        sorted_commands = self.stats_manager.sort_by_stats(commands, "reset_commands")
        
        if not sorted_commands:
             self.logger.error("‚ùå –ù–µ—Ç –∫–æ–º–∞–Ω–¥ —Å–±—Ä–æ—Å–∞ CLI –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
             return False
        
        success_count = 0
        for cmd_data in sorted_commands:
            cmd = cmd_data['command']
            cmd_id = cmd_data['id']
            
            result = self.connection.send_command_and_wait(
                cmd,
                expected_patterns=[
                    self.patterns['SUCCESS_GENERIC'],
                    self.patterns['PRIVILEGED_PROMPT'],
                    self.patterns['ERROR_GENERIC'],
                    self.patterns['CONFIRM_YN']
                ],
                timeout=self.timeouts['command_default']
            )
            
            if result == self.patterns['CONFIRM_YN']:
                self.logger.debug("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (Y/N), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º Y...")
                self.connection.send_raw(b'Y\r')
                time.sleep(1)
                # –ñ–¥–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º Enter
                self.connection.read_until_pattern([self.patterns['PRIVILEGED_PROMPT'], self.patterns['USER_PROMPT']], timeout=5)
                self.connection.send_raw(b'\r')

            final_output = self.connection.get_last_output()
            success_found = any(s in final_output for s in self.patterns['SUCCESS_GENERIC']) or self.patterns['PRIVILEGED_PROMPT'] in final_output
            error_found = any(e in final_output for e in self.patterns['ERROR_GENERIC'])
            
            if success_found and not error_found:
                self.logger.success(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ —Å–±—Ä–æ—Å–∞ '{cmd}' –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                self.stats_manager.update_stats("reset_commands", cmd_id, success=True)
                success_count += 1
            else:
                self.logger.warning(f"‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ —Å–±—Ä–æ—Å–∞ '{cmd}' –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π.")
                self.stats_manager.update_stats("reset_commands", cmd_id, success=False)
        
        self.stats_manager.save_stats("reset_commands")
        
        if success_count == 0:
            self.logger.error("‚ùå –ù–∏ –æ–¥–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ —Å–±—Ä–æ—Å–∞ CLI –Ω–µ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")
            return False
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.connection.send_command_and_wait("save", expected_patterns=[self.patterns['SUCCESS_GENERIC'], self.patterns['PRIVILEGED_PROMPT']], timeout=self.timeouts['command_default'])
        save_output = self.connection.get_last_output()
        if any(s in save_output for s in self.patterns['SUCCESS_GENERIC']) or self.patterns['PRIVILEGED_PROMPT'] in save_output:
            self.logger.success("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–±—Ä–æ—Å–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
        else:
            self.logger.warning("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–±—Ä–æ—Å–∞.")
            
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º
        self.logger.info("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ CLI...")
        self.connection.send_raw(b'reboot\r')
        time.sleep(2)
        
        reboot_confirm_output = self.connection.read_available()
        if self.patterns['CONFIRM_YN'] in reboot_confirm_output:
             self.connection.send_raw(b'Y\r')
             time.sleep(1)
             self.connection.send_raw(b'\r')
             time.sleep(0.5)
             self.connection.send_raw(b'\r')

        self.connection.read_until_pattern([self.patterns['REBOOTING']], timeout=10)
        self.logger.success("‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å —á–µ—Ä–µ–∑ CLI –≤—ã–ø–æ–ª–Ω–µ–Ω, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞...")
        
        self.parent.report_data["reset_method"] = "CLI"
        self.parent.report_data["reset_status"] = "Success"
        return True

    def perform_cli_checks(self):
        self.logger.step("üîç –ë–ª–æ–∫ 6: –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ CLI")
        
        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ 'show switch' ---
        show_switch_output = self.parent._run_show_command("show switch")
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ utils
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        self.logger.info(f"‚ÑπÔ∏è 'show switch' –≤—ã–≤–æ–¥: {show_switch_output[:200]}...")
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –∏ –∑–∞–ø–∏—Å—å –≤ report_data
        
        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ TFTP ---
        tftp_status = self._check_tftp_connectivity()
        self.parent.report_data["tftp_ping_status"] = tftp_status.get("status")
        self.parent.report_data["tftp_ip_used"] = tftp_status.get("ip")
        
        if tftp_status.get("status") != "Success":
            self.logger.warning("‚ö†Ô∏è TFTP –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ IP...")
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É IP, –∫–∞–∫ –≤ –ü–ª–∞–Ω–µ V7.2
            # self._setup_default_ip_config()
            # –ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–Ω–æ–≤–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º
            # tftp_status = self._check_tftp_connectivity()
            
        return True # –ü–æ–∫–∞ –≤—Å–µ–≥–¥–∞ —É—Å–ø–µ—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏

    def _check_tftp_connectivity(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å TFTP —Å–µ—Ä–≤–µ—Ä–∞."""
        tftp_ips = self.device_cfg.get("tftp_ip_candidates", ["192.168.1.100"])
        
        for ip in tftp_ips:
            self.logger.debug(f"–ü–∏–Ω–≥—É–µ–º TFTP —Å–µ—Ä–≤–µ—Ä: {ip}")
            self.connection.send_raw(b'\r') # –û—á–∏—Å—Ç–∫–∞
            time.sleep(0.5)
            ping_cmd = f"ping {ip}"
            result = self.connection.send_command_and_wait(
                ping_cmd,
                expected_patterns=[self.patterns['PING_SUCCESS'], self.patterns['PING_FAIL'], self.patterns['PRIVILEGED_PROMPT']],
                timeout=self.timeouts['ping_wait']
            )
            
            # –ü—Ä–µ—Ä—ã–≤–∞–µ–º, –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –∑–∞–≤–∏—Å–ª–∞
            self.connection.send_raw(b'\x03') # Ctrl+C
            time.sleep(1)
            self.connection.send_raw(b'\r') # –û—á–∏—Å—Ç–∫–∞
            
            final_output = self.connection.get_last_output()
            
            import re
            if result and re.search(self.patterns['PING_SUCCESS'], final_output):
                self.logger.success(f"‚úÖ TFTP-—Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: {ip}")
                return {"status": "Success", "ip": ip}
            else:
                self.logger.debug(f"–ü–∏–Ω–≥ {ip} –Ω–µ —É–¥–∞–ª—Å—è.")
                
        self.logger.error("‚ùå TFTP-—Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
        return {"status": "Fail", "ip": None}

    def perform_final_checks(self):
        self.logger.step("üèÅ –ë–ª–æ–∫ 9: –§–∏–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ")
        
        # --- –í—Ö–æ–¥ –≤ CLI ---
        # –í –ü–ª–∞–Ω–µ V7.2 —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏, –Ω–æ –º—ã —É–∂–µ –≤–æ—à–ª–∏
        # cli_result = self.attempt_cli_entry()
        # if cli_result != "SUCCESS_PRIVILEGED":
        #     self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ CLI –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫!")
        #     return False
        
        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ê–∫—Ç–∏–≤–Ω–æ–π –ü—Ä–æ—à–∏–≤–∫–∏ ---
        # show_firmware_output = self.parent._run_show_command("show firmware information")
        # TODO: –ü–∞—Ä—Å–∏–Ω–≥ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏
        
        # --- –û—á–∏—Å—Ç–∫–∞ –°—Ç–∞—Ä–æ–≥–æ –°–ª–æ—Ç–∞ ---
        # TODO: config firmware ... delete
        
        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –°–µ—Ç–∏ ---
        # TODO: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ IP, –ø–∏–Ω–≥–∏, –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤, telnet –ª–æ–≥–∏–Ω
        
        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –§–∞–π–ª–æ–≤–æ–π –°–∏—Å—Ç–µ–º—ã ---
        dir_output = self.parent._run_show_command("dir")
        self.parent.report_data["dir_output"] = dir_output
        # TODO: –ü–∞—Ä—Å–∏–Ω–≥ dir_output
        
        # --- –ü–æ—Å—Ç-–ù–∞—Å—Ç—Ä–æ–π–∫–∞ ---
        post_commands = self.device_cfg.get("post_config_commands", [])
        for cmd in post_commands:
            self.logger.info(f"üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç-–∫–æ–º–∞–Ω–¥—ã: {cmd}")
            self.connection.send_command_and_wait(cmd, expected_patterns=[self.patterns['SUCCESS_GENERIC'], self.patterns['PRIVILEGED_PROMPT']], timeout=self.timeouts['command_default'])
            # TODO: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        
        # --- –§–∏–Ω–∞–ª—å–Ω–æ–µ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ---
        save_result = self.connection.send_command_and_wait("save", expected_patterns=[self.patterns['SUCCESS_GENERIC'], self.patterns['PRIVILEGED_PROMPT']], timeout=self.timeouts['command_default'])
        save_output = self.connection.get_last_output()
        if save_result and (self.patterns['SUCCESS_GENERIC'] in save_output or self.patterns['PRIVILEGED_PROMPT'] in save_output):
            self.logger.success("üíæ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ.")
        else:
            self.logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.")
            return False
            
        return True
