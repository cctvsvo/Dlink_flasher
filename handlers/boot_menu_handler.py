# handlers/boot_menu_handler.py
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Boot Configuration Menu.
"""
import time

class BootMenuHandler:
    def __init__(self, parent):
        self.parent = parent
        self.logger = parent.logger
        self.connection = parent.connection
        self.patterns = parent.patterns
        self.device_cfg = parent.device_cfg
        self.timeouts = parent.timeouts

    def attempt_boot_menu_entry(self):
        self.logger.step("‚ö†Ô∏è –ë–ª–æ–∫ 4: –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ Boot Configuration Menu (–ê–≤–∞—Ä–∏–π–Ω—ã–π —Ä–µ–∂–∏–º)")
        self.logger.info("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ü–ï–†–ï–ó–ê–ì–†–£–ó–ò–¢–ï —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ Boot Menu.")
        
        boot_menu_combo_hex = self.device_cfg.get("boot_menu_combination", "33")
        boot_menu_combo_bytes = bytes.fromhex(boot_menu_combo_hex)
        
        start_time = time.monotonic()
        timeout = self.timeouts['boot_menu_wait']
        
        while time.monotonic() - start_time < timeout:
            output = self.connection.read_available()
            if output:
                self.logger.debug(f"üì• –î–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ Boot Menu: {output[:100]}...")
                if any(ind in output for ind in self.patterns['boot_indicators']):
                    self.logger.debug("üì• –û–±–Ω–∞—Ä—É–∂–µ–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –¥–ª—è Boot Menu.")
                    self.connection.send_raw(boot_menu_combo_bytes)
                    time.sleep(0.5) # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
                    
                    # –ñ–¥–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã Boot Menu
                    menu_output = self.connection.read_until_pattern(
                        self.patterns['boot_menu_indicators'],
                        timeout=20
                    )
                    
                    if any(ind in menu_output for ind in self.patterns['boot_menu_indicators']):
                        self.logger.success("‚úÖ –£—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ Boot Configuration Menu!")
                        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –º–µ–Ω—é –∏ ZModem
                        # –≠—Ç–æ —Å–ª–æ–∂–Ω–∞—è —á–∞—Å—Ç—å, —Ç—Ä–µ–±—É—é—â–∞—è —ç–º—É–ª—è—Ü–∏–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –∏ —Ä–∞–±–æ—Ç—ã —Å ZModem
                        self.logger.info("‚ÑπÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω Boot Menu. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ZModem (–ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏).")
                        self.logger.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Ä—É—á–Ω—É—é –≤—ã–±–µ—Ä–∏—Ç–µ 'Download Protocol: [ZModem]' –∏ –ø–µ—Ä–µ–¥–∞–π—Ç–µ —Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ ZModem.")
                        input("–ù–∞–∂–º–∏—Ç–µ Enter –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä—É—á–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...")
                        return True
                    else:
                        self.logger.warning("‚ö†Ô∏è –ö–æ–º–±–∏–Ω–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –Ω–æ Boot Menu –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω.")
                        
            time.sleep(0.5)
            
        self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ Boot Configuration Menu!")
        return False
