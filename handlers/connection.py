# handlers/connection.py
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.
"""
import serial
import time

class SerialConnection:
    def __init__(self, port, baudrate, logger):
        self.port = port
        self.baudrate = baudrate
        self.logger = logger
        self.conn = None
        self._last_output = ""

    def connect(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ."""
        try:
            self.conn = serial.Serial(self.port, self.baudrate, timeout=1)
            self.logger.debug(f"üîå –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {self.port} ({self.baudrate} baud)...")
            time.sleep(1) # –°—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è
            self.logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {self.port} ({self.baudrate} baud) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
        except Exception as e:
            self.logger.critical(f"‚ùå(CRITICAL) –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø–æ—Ä—Ç—É {self.port}: {e}")
            raise SystemExit(1)

    def disconnect(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ."""
        if self.conn and self.conn.is_open:
            self.conn.close()
            self.logger.info(f"üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å {self.port} –∑–∞–∫—Ä—ã—Ç–æ.")

    def send_raw(self, data_bytes):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—ã—Ä—ã–µ –±–∞–π—Ç—ã."""
        if self.conn:
            self.conn.write(data_bytes)

    def read_available(self):
        """–ß–∏—Ç–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."""
        if self.conn and self.conn.in_waiting > 0:
            data = self.conn.read(self.conn.in_waiting)
            decoded_data = data.decode('utf-8', errors='ignore')
            self.logger.debug(f"üì• –ü–æ–ª—É—á–µ–Ω—ã —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: {repr(data)} -> '{decoded_data}'")
            return decoded_data
        return ""

    def read_until_pattern(self, patterns, timeout=10):
        """
        –ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ—Ç –æ–¥–∏–Ω –∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏–ª–∏ –Ω–µ –∏—Å—Ç–µ—á–µ—Ç —Ç–∞–π–º–∞—É—Ç.
        """
        start_time = time.monotonic()
        buffer = ""
        while time.monotonic() - start_time < timeout:
            buffer += self.read_available()
            for pattern in patterns:
                import re
                if re.search(pattern, buffer, re.IGNORECASE):
                    self.logger.debug(f"üéØ –ù–∞–π–¥–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω '{pattern}' –≤ –±—É—Ñ–µ—Ä–µ.")
                    return buffer
            time.sleep(0.1)
        self.logger.debug(f"‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ {patterns}. –ë—É—Ñ–µ—Ä: {buffer[-200:]}...")
        return buffer

    def send_command_and_wait(self, command, expected_patterns, timeout=10):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –∂–¥–µ—Ç –æ–¥–∏–Ω –∏–∑ –æ–∂–∏–¥–∞–µ–º—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤.
        """
        self.logger.debug(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã: {command}")
        self.send_raw(f"{command}\r".encode())
        output = self.read_until_pattern(expected_patterns, timeout)
        self._last_output = output
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–∞–π–¥–µ–Ω
        import re
        for pattern in expected_patterns:
            if re.search(pattern, output, re.IGNORECASE):
                self.logger.debug(f"üéØ –ö–æ–º–∞–Ω–¥–∞ '{command}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º '{pattern}'.")
                return pattern
        self.logger.debug(f"‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ '{command}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ –æ–∂–∏–¥–∞–µ–º—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–≤–æ–¥: {output[-100:]}...")
        return None

    def get_last_output(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—ã–≤–æ–¥ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–º–∞–Ω–¥—ã."""
        return getattr(self, '_last_output', "")
