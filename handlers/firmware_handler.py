# handlers/ firmware_handler.py
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è PROM –∏ –ø—Ä–æ—à–∏–≤–∫–∏.
"""
import time

class FirmwareHandler:
    def __init__(self, parent):
        self.parent = parent
        self.logger = parent.logger
        self.connection = parent.connection
        self.patterns = parent.patterns
        self.device_cfg = parent.device_cfg
        self.timeouts = parent.timeouts
        self.firmware_info = parent.firmware_info
        self.cli_handler = parent.cli_handler # –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞

    def update_prom(self):
        self.logger.step("üíæ –ë–ª–æ–∫ 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ PROM")
        
        model_info = self.firmware_info.get(self.parent.model, {})
        prom_info = model_info.get("prom", {})
        
        if not prom_info or not prom_info.get("target_version"):
            self.logger.info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ PROM –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –¥–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏.")
            return "SKIP"
            
        # TODO: –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é PROM —á–µ—Ä–µ–∑ CLI (show switch)
        # current_prom_version = ...
        current_prom_version = "1.00.B004" # –ó–∞–≥–ª—É—à–∫–∞
        target_prom_version = prom_info["target_version"]
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π (–ø—Ä–æ—Å—Ç–æ–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–æ–∂–Ω–µ–µ)
        if current_prom_version >= target_prom_version and not self.parent.force_reflash:
            self.logger.info(f"‚úÖ PROM –∞–∫—Ç—É–∞–ª–µ–Ω ({current_prom_version}). –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
            return "SKIP"
            
        self.logger.info(f"üîÑ –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ PROM —Å {current_prom_version} –¥–æ {target_prom_version}.")
        
        tftp_ip = self.parent.report_data.get("tftp_ip_used")
        if not tftp_ip:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–Ω–æ–≤–∞
            # tftp_status = self.cli_handler._check_tftp_connectivity()
            # tftp_ip = tftp_status.get("ip")
            tftp_ip = "192.168.1.100" # –ó–∞–≥–ª—É—à–∫–∞
            
        if not tftp_ip:
            self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å IP –∞–¥—Ä–µ—Å TFTP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è PROM.")
            return "ERROR"
            
        prom_filename = prom_info["filename"]
        download_cmd = f"download firmware_fromTFTP {tftp_ip} {prom_filename}"
        
        self.logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ PROM: {download_cmd}")
        result = self.connection.send_command_and_wait(
            download_cmd,
            expected_patterns=[self.patterns['FIRMWARE_DOWNLOAD_SUCCESS'], self.patterns['FIRMWARE_DOWNLOAD_ERROR'], self.patterns['PRIVILEGED_PROMPT']],
            timeout=self.timeouts['firmware_download']
        )
        
        download_output = self.connection.get_last_output()
        if result == self.patterns['FIRMWARE_DOWNLOAD_SUCCESS'] or "Success" in download_output:
            self.logger.success("‚úÖ PROM —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")
        else:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ PROM: {download_output}")
            return "ERROR"
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        save_result = self.connection.send_command_and_wait("save", expected_patterns=[self.patterns['SUCCESS_GENERIC'], self.patterns['PRIVILEGED_PROMPT']], timeout=self.timeouts['command_default'])
        if not save_result:
            self.logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ PROM.")
            return "ERROR"
            
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º
        self.logger.info("üîÑ PROM –æ–±–Ω–æ–≤–ª–µ–Ω. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...")
        self.connection.send_raw(b'reboot\r')
        time.sleep(2)
        
        reboot_confirm_output = self.connection.read_available()
        if self.patterns['CONFIRM_YN'] in reboot_confirm_output:
             self.connection.send_raw(b'Y\r')
             time.sleep(1)
             self.connection.send_raw(b'\r')
             time.sleep(0.5)
             self.connection.send_raw(b'\r')

        self.connection.read_until_pattern([self.patterns['REBOOTING']], timeout=10)
        self.logger.success("‚úÖ PROM –æ–±–Ω–æ–≤–ª–µ–Ω, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞...")
        
        return "REBOOT_NEEDED"

    def update_firmware(self):
        self.logger.step("üìÄ –ë–ª–æ–∫ 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—à–∏–≤–∫–∏")
        
        model_info = self.firmware_info.get(self.parent.model, {})
        firmware_cfg = model_info.get("firmware", {})
        
        if not firmware_cfg or not firmware_cfg.get("final_version"):
            self.logger.info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–∏–≤–∫–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
            return "SKIP"
            
        # TODO: –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ—Ç–∞—Ö —á–µ—Ä–µ–∑ CLI (show firmware information)
        # firmware_info_output = self.parent._run_show_command("show firmware information")
        # slots_info = parse_firmware_slots(firmware_info_output) # –§—É–Ω–∫—Ü–∏—è –∏–∑ utils
        
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏–º—É–ª–∏—Ä—É–µ–º
        slots_info = {
            "Slot 1": {"version": "1.21.B006", "status": "Boot"},
            "Slot 2": {"version": "empty", "status": "Empty"}
        }
        self.parent.report_data["firmware_slots_before_update"] = str(slots_info)
        
        active_slot = None
        empty_slot = None
        active_version = None
        for slot_name, slot_data in slots_info.items():
            if slot_data["status"] == "Boot":
                active_slot = slot_name
                active_version = slot_data["version"]
            elif slot_data["status"] == "Empty":
                empty_slot = slot_name
                
        if not active_slot:
            self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Å–ª–æ—Ç –ø—Ä–æ—à–∏–≤–∫–∏.")
            return "ERROR"
            
        final_version = firmware_cfg["final_version"]
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π
        if active_version == final_version and not self.parent.force_reflash:
            self.logger.info(f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–æ—à–∏–≤–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞ ({active_version}). –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
            return "SKIP"
            
        self.logger.info(f"üîÑ –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–∏–≤–∫–∏ —Å {active_version} –¥–æ {final_version}.")
        
        tftp_ip = self.parent.report_data.get("tftp_ip_used", "192.168.1.100") # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
        
        target_slot = empty_slot if empty_slot else ("Slot 2" if active_slot == "Slot 1" else "Slot 1")
        self.logger.info(f"–¶–µ–ª–µ–≤–æ–π —Å–ª–æ—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: {target_slot}")
        
        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π –ø—Ä–æ—à–∏–≤–∫–∏ ---
        intermediate_needed = False
        intermediate_version = firmware_cfg.get("intermediate_version")
        final_filename = firmware_cfg["final_filename"]
        
        # –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ (—É–ø—Ä–æ—â–µ–Ω–∞)
        if intermediate_version and active_version < intermediate_version and active_version < final_version:
            intermediate_needed = True
            filename_to_download = firmware_cfg["intermediate_filename"]
            self.logger.info(f"üîÑ –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è –ø—Ä–æ—à–∏–≤–∫–∞: {intermediate_version}")
        else:
            filename_to_download = final_filename
            self.logger.info(f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ—à–∏–≤–∫–∏: {final_version}")
            
        # --- –û—á–∏—Å—Ç–∫–∞ —Ü–µ–ª–µ–≤–æ–≥–æ —Å–ª–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç ---
        if not empty_slot:
            self.logger.info(f"üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Ü–µ–ª–µ–≤–æ–≥–æ —Å–ª–æ—Ç–∞ {target_slot}...")
            delete_cmd = f"config firmware image_id {target_slot.split()[1]} delete"
            self.connection.send_command_and_wait(delete_cmd, expected_patterns=[self.patterns['CONFIRM_YN'], self.patterns['SUCCESS_GENERIC'], self.patterns['PRIVILEGED_PROMPT']], timeout=self.timeouts['command_default'])
            delete_confirm = self.connection.get_last_output()
            if self.patterns['CONFIRM_YN'] in delete_confirm:
                self.connection.send_raw(b'Y\r')
                time.sleep(1)
                self.connection.send_raw(b'\r')
                time.sleep(0.5)
                self.connection.send_raw(b'\r')
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                self.connection.read_until_pattern([self.patterns['SUCCESS_GENERIC'], self.patterns['PRIVILEGED_PROMPT']], timeout=10)
                self.logger.success(f"‚úÖ –°–ª–æ—Ç {target_slot} –æ—á–∏—â–µ–Ω.")
            else:
                self.logger.warning(f"‚ö†Ô∏è –û—á–∏—Å—Ç–∫–∞ —Å–ª–æ—Ç–∞ {target_slot} –º–æ–∂–µ—Ç –Ω–µ –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –∏–ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
        
        # --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—à–∏–≤–∫–∏ ---
        image_id = target_slot.split()[1]
        download_cmd = f"download firmware_fromTFTP {tftp_ip} {filename_to_download} image_id {image_id}"
        
        self.logger.info(f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—à–∏–≤–∫–∏: {download_cmd}")
        result = self.connection.send_command_and_wait(
            download_cmd,
            expected_patterns=[self.patterns['FIRMWARE_DOWNLOAD_SUCCESS'], self.patterns['FIRMWARE_DOWNLOAD_ERROR'], self.patterns['PRIVILEGED_PROMPT']],
            timeout=self.timeouts['firmware_download']
        )
        
        download_output = self.connection.get_last_output()
        if result == self.patterns['FIRMWARE_DOWNLOAD_SUCCESS'] or "Success" in download_output:
            self.logger.success(f"‚úÖ –ü—Ä–æ—à–∏–≤–∫–∞ {filename_to_download} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ {target_slot}.")
        else:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—à–∏–≤–∫–∏: {download_output}")
            return "ERROR"
            
        # --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –ø—Ä–æ—à–∏–≤–∫–∏ –∫–∞–∫ –∑–∞–≥—Ä—É–∑–æ—á–Ω–æ–π ---
        bootup_cmd = f"config firmware image_id {image_id} boot_up"
        self.connection.send_command_and_wait(bootup_cmd, expected_patterns=[self.patterns['SUCCESS_GENERIC'], self.patterns['PRIVILEGED_PROMPT']], timeout=self.timeouts['command_default'])
        bootup_output = self.connection.get_last_output()
        if any(s in bootup_output for s in self.patterns['SUCCESS_GENERIC']) or self.patterns['PRIVILEGED_PROMPT'] in bootup_output:
            self.logger.success(f"‚úÖ –ü—Ä–æ—à–∏–≤–∫–∞ –≤ {target_slot} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞–∫ –∑–∞–≥—Ä—É–∑–æ—á–Ω–∞—è.")
        else:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—à–∏–≤–∫–∏ –∫–∞–∫ –∑–∞–≥—Ä—É–∑–æ—á–Ω–æ–π: {bootup_output}")
            return "ERROR"
            
        # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
        save_result = self.connection.send_command_and_wait("save", expected_patterns=[self.patterns['SUCCESS_GENERIC'], self.patterns['PRIVILEGED_PROMPT']], timeout=self.timeouts['command_default'])
        if not save_result:
            self.logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—à–∏–≤–∫–∏.")
            return "ERROR"
            
        # --- –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ ---
        self.logger.info("üîÑ –ü—Ä–æ—à–∏–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...")
        self.connection.send_raw(b'reboot\r')
        time.sleep(2)
        
        reboot_confirm_output = self.connection.read_available()
        if self.patterns['CONFIRM_YN'] in reboot_confirm_output:
             self.connection.send_raw(b'Y\r')
             time.sleep(1)
             self.connection.send_raw(b'\r')
             time.sleep(0.5)
             self.connection.send_raw(b'\r')

        self.connection.read_until_pattern([self.patterns['REBOOTING']], timeout=10)
        self.logger.success("‚úÖ –ü—Ä–æ—à–∏–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞...")
        
        # --- –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è –ø—Ä–æ—à–∏–≤–∫–∞, –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–Ω–æ–≤–∞ –æ–±–Ω–æ–≤–∏—Ç—å ---
        if intermediate_needed and filename_to_download == firmware_cfg["intermediate_filename"]:
            self.logger.info("‚ÑπÔ∏è –ë—ã–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è –ø—Ä–æ—à–∏–≤–∫–∞. –ü–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—É—é.")
            # –ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –≤—Ö–æ–¥–µ –≤ CLI –±—É–¥–µ—Ç —Å–Ω–æ–≤–∞ –≤—ã–∑–≤–∞–Ω update_firmware
            
        return "REBOOT_NEEDED"
